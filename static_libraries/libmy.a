!<arch>
0-isupper.o/    0           0     0     644     289       `
#include "main.h"
#include <stdio.h>

/**
 * _isupper - dchecks if a character is upper case
 * @c: character to be compared
 *
 * Return: Returns a true or false value
 */
int _isupper(int c)
{
	int b;

	for (b = 65; b <= 90; b++)
	{
		if (c == b)
		{
			return (1);
		}
	}
	return (0);
}

0-memset.o/     0           0     0     644     389       `
#include "main.h"
#include <stdio.h>

/**
 * *_memset - Directly modify memory based on past arguements
 * @s: Pointer to modified
 * @b: Is what to put in memory
 * @n: Is number of bytes to change
 *
 * Return: Pointer to Memory Address of s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;
	char *p = s;

	i = 0;
	for (i = 0; i < n; i++)
		s[i] = b;
	return (p);
}

0-strcat.o/     0           0     0     644     397       `
#include "main.h"
#include <stdio.h>

/**
 * *_strcat - Adds one string to the end of the other
 * @dest: The destination
 * @src: The Source
 *
 * Return: Pointer to Dest
 */
char *_strcat(char *dest, char *src)
{
	int l1;
	int l2;

	l1 = 0;
	l2 = 0;
	while (dest[l1] != '\0')
	{
		l1++;
	}
	while (src[l2] != '\0')
	{
		dest[l1] = src[l2];
		l1++;
		l2++;
	}
	dest[l1] = '\0';
	return (dest);
}

100-atoi.o/     0           0     0     644     534       `
#include "main.h"
#include <stdio.h>

/**
 * _atoi - Converts a string to int
 * @s: The string to convert
 *
 * Return: The new int value
 */
int _atoi(char *s)
{
	unsigned int nv;
	int i;
	int sv;
	int tv;

	i = 0;
	nv = 0;
	sv = 0;
	tv = 0;
	while (s[i] != '\0')
	{
		if (s[i] == 45)
		{
			if (sv < 0)
				sv = sv * -1;
			else
				sv--;
		}
		if ((s[i] >= 48) && (s[i] <= 57))
		{
			tv = s[i] - 48;
			nv = (nv * 10) + tv;
			i++;
		}
		else if (nv == 0)
			i++;
		else
			break;
	}
	if (sv < 0)
		nv = nv * -1;
	return (nv);
}
1-isdigit.o/    0           0     0     644     286       `
#include "main.h"
#include <stdio.h>

/**
 * _isdigit - checks if a character is a digit
 * @c: character to be compared
 *
 * Return: Returns a true or false value
 */
int _isdigit(int c)
{
	int b;

	for (b = 48; b <= 57; b++)
	{
		if (c == b)
		{
			return (1);
		}
	}
	return (0);
}
1-memcpy.o/     0           0     0     644     360       `
#include "main.h"
#include <stdio.h>

/**
 * *_memcpy - Directly copies n bytes of memory
 * @dest: Destination location
 * @src: Source location
 * @n: Is number of bytes to copy
 *
 * Return: Pointer to dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	i = 0;
		for (i = 0; i < n; i++)
			dest[i] = src[i];
	return (dest);
}
1-strncat.o/    0           0     0     644     497       `
#include "main.h"
#include <stdio.h>

/**
 * *_strncat - Adds n characters to the end of another string
 * @dest: The destination
 * @src: The Source
 * @n: Number of source characters to use
 *
 * Return: Pointer to Dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int l1;
	int l2;

	l1 = 0;
	l2 = 0;
	while (dest[l1] != '\0')
	{
		l1++;
	}
	while (src[l2] != '\0')
	{
		if (l2 < n)
		{
			dest[l1] = src[l2];
			l1++;
			l2++;
		}
		else
			break;
	}
	dest[l1] = '\0';
	return (dest);
}

2-strchr.o/     0           0     0     644     513       `
#include "main.h"
#include <stdio.h>

/**
 * *_strchr - Locates a char in a passed string
 * @s: String to search
 * @c: Character to locate
 *
 * Return: Pointer to charcter or NULL
 */
char *_strchr(char *s, char c)
{
	int i;
	int i2;
	int d;
	char p[7000];
	char *n = p;

	i = 0;
	i2 = 0;
	d = 0;
	while (s[i] != '\0')
	{
		if ((s[i] == c) || (d == 1))
		{
			p[i2] = s[i];
			d = 1;
			i2++;
		}
		i++;
	}
	if (s[i] == c)
	{
		p[i] = s[i];
		return (n);
	}
	if (d == 1)
		return (n);
	else
		return (NULL);
}

2-strlen.o/     0           0     0     644     263       `
#include "main.h"
#include <stdio.h>

/**
 * _strlen - gets the length of a passed string
 * @s: String to be evaluated
 *
 * Return: Returns value based on the length
 */
int _strlen(char *s)
{
	int l = 0;

	while (*s != '\0')
	{
		l++;
		s++;
	}
	return (l);
}

2-strncpy.o/    0           0     0     644     439       `
#include "main.h"
#include <stdio.h>

/**
 * *_strncpy - Copys n bytes of a str to a new location
 * @dest: The destination
 * @src: The Source
 * @n: Number of bytes to be copied
 *
 * Return: Pointer to Dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	i = 0;
	while (src[i] != '\0')
	{
		if (i < n)
		{
			dest[i] = src[i];
			i++;
		}
		else
			break;
	}
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}

3-islower.o/    0           0     0     644     290       `
#include "main.h"
#include <stdio.h>

/**
 * _islower - checks if a character is lower case
 * @c: character to be compared
 *
 * Return: Returns a true or false value
 */
int _islower(int c)
{
	int b;

	for (b = 97; b <= 122; b++)
	{
		if (c == b)
		{
			return (1);
		}
	}
	return (0);
}
3-puts.o/       0           0     0     644     243       `
#include "main.h"
#include <stdio.h>

/**
 * _puts - Prints the passed string
 * @str: String to be be printed
 *
 * Return: No Return Value
 */
void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str);
		str++;
	}
	_putchar('\n');
}

3-strcmp.o/     0           0     0     644     369       `
#include "main.h"
#include <stdio.h>

/**
 * _strcmp - Compares two strings
 * @s1: First string
 * @s2: Second string
 *
 * Return: Value based on comparison
 */
int _strcmp(char *s1, char *s2)
{
	int i;
	int r;

	i = 0;
	r = 0;
	while ((s1[i] != '\0') && (s2[i] != '\0'))
	{
		if (s1[i] != s2[i])
		{
			r = s1[i] - s2[i];
			return (r);
		}
		i++;
	}
	return (0);
}

3-strspn.o/     0           0     0     644     572       `
#include "main.h"
#include <stdio.h>

/**
 * *_strspn - Finds the length of a prefix substring
 * @s: String to be examined
 * @accept: Characters in the prefix substring
 *
 * Return: Length of the prefix substring
 */
unsigned int _strspn(char *s, char *accept)
{
	int i;
	int i2;
	int c;
	unsigned int r;

	i = 0;
	i2 = 0;
	r = 0;
	c = 0;
	while (s[i] != '\0')
	{
		while (accept[i2] != '\0')
		{
			if (s[i] == accept[i2])
			{
				r++;
				c = 1;
				break;
			}
			i2++;
		}
		if (c != 0)
		{
			i++;
			i2 = 0;
			c = 0;
		}
		else
			return (r);
	}
	return (r);
}
4-isalpha.o/    0           0     0     644     359       `
#include "main.h"
#include <stdio.h>

/**
 * _isalpha - checks if a character is a letter
 * @c: character to be compared
 *
 * Return: Returns a true or false value
 */
int _isalpha(int c)
{
	int b;

	for (b = 65; b <= 90; b++)
	{
		if (c == b)
		{
			return (1);
		}
	}
	for (b = 97; b <= 122; b++)
	{
		if (c == b)
		{
			return (1);
		}
	}
	return (0);
}

4-strpbrk.o/    0           0     0     644     509       `
#include "main.h"
#include <stdio.h>

/**
 * *_strpbrk - Finds the first occurance of a stated character
 * @s: String to be examined
 * @accept: Characters in the list to locate
 *
 * Return: Pointer to first occurance
 */
char *_strpbrk(char *s, char *accept)
{
	int i;
	int i2;

	i = 0;
	i2 = 0;
	while (s[i] != '\0')
	{
		while (accept[i2] != '\0')
		{
			if (s[i] != accept[i2])
				i2++;
			else
				return (&s[i]);
		}
		if (s[i] == accept[i2])
			return (&s[i]);
		i++;
		i2 = 0;
	}
	return (NULL);
}

5-strstr.o/     0           0     0     644     614       `
#include "main.h"
#include <stdio.h>

/**
 * *_strstr - Finds one string inside another
 * @haystack: Full string to examine
 * @needle: String to locate
 *
 * Return: Pointer to first occurance of full substring
 */
char *_strstr(char *haystack, char *needle)
{
	int i;
	int i2;
	int m;

	i = 0;
	i2 = 0;
	m = 0;
	if (needle[i2] == '\0')
		return (&haystack[i]);
	while (haystack[i] != '\0')
	{
		if (haystack[i] == needle[i2])
		{
			if (m == 0)
				m = i - 1;
			i2++;
			i++;
			if (needle[i2] == '\0')
				break;
		}
		else
		{
			m = 0;
			i++;
		}
	}
	if (m != 0)
		return (&haystack[m]);
	return (NULL);
}
6-abs.o/        0           0     0     644     299       `
#include "main.h"
#include <stdio.h>

/**
 * _abs - gives the abs value of a passed number
 * @n: number to be evaluated
 *
 * Return: Returns the abs value of n
 */
int _abs(int n)
{
	if (n < 0)
	{
		n = (n * -1);
		return (n);
	}
	else if (n > 0)
		return (n);
	else
		return (0);

	return (0);
}

9-strcpy.o/     0           0     0     644     316       `
#include "main.h"
#include <stdio.h>

/**
 * *_strcpy - Copys a stt to a new location
 * @dest: The destination
 * @src: The Source
 *
 * Return: Pointer to Dest
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	i = 0;
	while (src[i] != '\0')
	{
		dest[i] = src[i];
		i++;
	}
	dest[i] = src[i];
	return (dest);
}
_putchar.o/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

